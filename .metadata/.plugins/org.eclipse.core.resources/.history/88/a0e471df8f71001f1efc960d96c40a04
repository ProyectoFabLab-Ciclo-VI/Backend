package com.springboot.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.dto.CargoDTO;
import com.springboot.dto.UsuarioDTO;
import com.springboot.entity.Cargo;
import com.springboot.entity.Persona;
import com.springboot.entity.Usuario;
import com.springboot.service.CargoService;
import com.springboot.service.PersonaService;
import com.springboot.service.UsuarioService;

@RestController
@RequestMapping("/apiusuario")
public class GestionUsuarioController {

	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private PersonaService personaService;
	
	@Autowired
	private CargoService cargoService;
	
	@PostMapping("/login")
	public ResponseEntity<?> createUsuario (@RequestBody UsuarioDTO usuarioDTO){
		Usuario usuario = new Usuario(usuarioDTO.getUsername(),
									  usuarioDTO.getPassword(),
									  usuarioDTO.getPersona());
		usuarioService.save(usuario);
		return new ResponseEntity<>(usuario, HttpStatus.CREATED);
	}
	
	@GetMapping("/listar")
	public ResponseEntity<List<Usuario>> listarUsuario(){
		List<Usuario> listUsuario = usuarioService.list();
		return new ResponseEntity<List<Usuario>>(listUsuario, HttpStatus.OK);
	}
	
	@PutMapping("/update/{id}")
	public ResponseEntity<?> updateUsuario (@PathVariable ("id") int id, @RequestBody UsuarioDTO usuarioDTO){
		Usuario usuario = usuarioService.getOne(id).get();
		usuario.setUsername(usuarioDTO.getUsername());
		usuario.setPassword(usuarioDTO.getPassword());
		usuario.setPersona(usuarioDTO.getPersona());
		usuarioService.save(usuario);
		return new ResponseEntity("Usuario Actualizado", HttpStatus.OK);
	}
	
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<?> deleteUsuario (@PathVariable ("id") int id){
		usuarioService.delete(id);
		return new ResponseEntity("Usuario Eliminado", HttpStatus.NO_CONTENT);
	}
	@GetMapping("/listarpersona")
	public ResponseEntity<List<Persona>> listarPersona(){
		List<Persona> listPersona = personaService.list();
		return new ResponseEntity<List<Persona>>(listPersona, HttpStatus.OK);
	}
	
	@GetMapping("/listarcargo")
	public ResponseEntity<List<Cargo>> listarCargo(){
		List<Cargo> listCargo = cargoService.list();
		return new ResponseEntity<List<Cargo>>(listCargo, HttpStatus.OK);
	}
	
	@PutMapping("/updatecargo")
	public ResponseEntity<?> updateCargo (@PathVariable ("id") int id, @RequestBody CargoDTO cargoDTO){
		Cargo cargo = cargoService.getOne(id).get();
		cargo.setNombre(cargoDTO.getNombre());
		
		cargoService.save(cargo);
		return new ResponseEntity("Cargo Actualizado", HttpStatus.OK);
	}
}
